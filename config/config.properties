#=============================bytecode enhancement configuration==============================#
# ReTransform switch. If enabled, bytecode enhancement can be performed on loaded classes by ReTransform. The default value is true.
agent.config.isReTransformEnable=true
# If this function is enabled, logs related to bytecode enhancement will be output to log files. The default value is false.
agent.config.isShowEnhanceLog=false
# Enhanced class bytecode output switch. If this switch is enabled, the enhanced bytecode is output as a file. The default value is false
agent.config.isOutputEnhancedClasses=false
# The enhanced bytecode output location of the enhanced class. If this parameter is not configured, it is agent/enhancedClasses by default
agent.config.enhancedClassesOutputPath=
# Enable the host service instance class to be loaded by the thread context classloader during interceptor execution. If enabled, the host class is loaded by the context classloader during interceptor execution for service governance logic use. The default value is true.
agent.config.useContextLoader=true
# List of class prefixes that need be ignored when bytecode enhancement is performed.
agent.config.ignoredPrefixes=io.sermant,io.opentelemetry
# List of interfaces that need to be ignored when bytecode enhancement is used to search for a class. If all implementation classes of an interface do not want to be bytecode enhanced, you can configure this configuration item
agent.config.ignoredInterfaces=org.springframework.cglib.proxy.Factory
# List of the ClassLoaders, used to ignore the classes loaded by specific ClassLoaders. This can resolve some issues caused by multiple JavaAgents
agent.config.ignoredClassLoaders=
# Specifies which classes in the plugins are allowed to be bytecode enhanced (classes in the plugins are not allowed to be bytecode enhanced by default)
agent.config.serviceInjectList=io.sermant.discovery.service.lb.filter.NopInstanceFilter,io.sermant.discovery.service.lb.DiscoveryManager,io.sermant.discovery.service.util.ApplyUtil,io.sermant.discovery.service.lb.cache.InstanceCacheManager
# Generate unmatched class name to file, used to reduce startup time for the second time and after
agent.config.preFilter.enable=false
# Path of unmatched class name file, the default path is the same directory of sermant-agent.jar
agent.config.preFilter.path=
# File name of unmatched class name, the default file is 'unmatched_class_name.txt'
agent.config.preFilter.file=
# External agent injection
agent.config.externalAgent.injection=false
# External agent name, OTEL is tested and supported. Other agents need to be tested by developers
agent.config.externalAgent.name=OTEL
# File of external agent, example: /user/opentelemetry-javaagent.jar
agent.config.externalAgent.file=
#============================= core service configuration =============================#
# Heartbeat service switch
agent.service.heartbeat.enable=false
# Gateway service switch
agent.service.gateway.enable=false
# Tracing service switch
agent.service.tracing.enable=false
# Spring inject service switch
agent.service.inject.enable=true
# Dynamic config service switch
agent.service.dynamic.config.enable=false
# HTTP server switch
agent.service.httpserver.enable=false
# xDS service switch
agent.service.xds.service.enable=false
# dynamic mount service switch
agent.service.hot.plugging.service.enable=false
# Metric service switch
agent.service.metric.enable=false
#============================= Event configuration =============================#
# Event switch
event.enable=false
# Report warn log switch
event.offerWarnLog=false
# Report error log switch
event.offerErrorLog=false
# Event sending interval, specifying the interval (ms) for events to be sent to Sermant Backend
event.sendInterval=30000
# Specify the same event recording interval to repeat event compression (ms) over a certain period of time
event.offerInterval=300000
# Internal event notification switch
notification.enable=false
#=============================Dynamic config service configuration =============================#
# Specify config read timeout (ms)
dynamic.config.timeoutValue=30000
# Specify the default group for the config
dynamic.config.defaultGroup=sermant
# Specify the server address of the configuration center
dynamic.config.serverAddress=127.0.0.1:2181
# Specify the type of dynamic configuration center. The value can be NOP(no implementation), ZOOKEEPER, KIE, or NACOS
dynamic.config.dynamicConfigType=ZOOKEEPER
# Specify the number of reconnections to the configuration center when Sermant is started
dynamic.config.connectRetryTimes=5
# Specify the timeout (ms) of connection to the configuration center when Sermant is started
dynamic.config.connectTimeout=1000
# Specify whether to enable the authorization of the configuration center. If enable authorization, you need to verify the user name and password
dynamic.config.enableAuth=false
# Specify the user name for connecting to the dynamic configuration center
dynamic.config.userName=
# Specify the password for connecting to the dynamic configuration center
dynamic.config.password=
# Specify the AES privateKey that encrypts and decrypts the password
dynamic.config.privateKey=
# Specify the request timeout time (ms) to get the configuration
dynamic.config.requestTimeout=3000
#=============================Heartbeat service configuration===============================#
# Specify Heartbeat Interval (ms)
heartbeat.interval=30000
#=============================Spring inject service configuration=========================#
# The packages needed for Spring inject service
inject.essentialPackage=io.sermant,io.sermant.dynamic.config,io.sermant.flowcontrol,io.sermant.loadbalancer,io.sermant.monitor,io.sermant.dubbo.registry,io.sermant.registry,io.sermant.visibility,io.sermant.discovery
#=============================Gateway service configuration===============================#
# Specify the IP address of Netty server
gateway.nettyIp=127.0.0.1
# Specify the port of Netty server
gateway.nettyPort=6888
# Specify the Netty server connection timeout duration (ms)
#gateway.nettyConnectTimeout=5000
# Specify read/write wait time of Netty (ms).
#gateway.nettyWriteAndReadWaitTime=60000
# Specify the interval that data sent to the server (s).
#gateway.sendInternalTime=10
# Specify retreat algorithm initial connection interval (s)
#gateway.initReconnectInternalTime=5
# Specify retreat algorithm maximum connection interval (s)
#gateway.maxReconnectInternalTime=180
#=============================xds configuration===============================#
# istiod control plane address, security.enable=false with 15010 port, and security.enable=true with 15012 port
xds.config.control.plane.address=istiod.istio-system.svc:15010
# Whether to use secure communication with the control plane
xds.config.security.enable=false
# service account token used for secure communication with the control plane
xds.config.service.account.token.path=/var/run/secrets/kubernetes.io/serviceaccount/token
#=============================Metadata===============================#
# Service name for host service instance
service.meta.service=default
# Application name for host service instance, used in service governance scenarios such as service registration and label routing
service.meta.application=default
# Version for host service instance, used in service governance scenarios such as service registration and label routing
service.meta.version=1.0.0
# Namespace for host service instance, used in service governance scenarios such as service registration and label routing
service.meta.project=default
# Environment for host service instance, used in service governance scenarios such as service registration and label routing
service.meta.environment=
# Availability Zone for host service instance, used in service governance scenarios such as service registration and label routing
service.meta.zone=
#=============================metric configuration===============================#
# The metric type, currently supports prometheus.
metric.type=prometheus
# The maximum number of metrics.
metric.maxTimeSeries=1000
# Defines the common tag keys for metrics, with multiple keys separated by commas, the default values include "agent", "agent.app.name", "agent.ip" and "scope". For a complete list of available tag keys, refer to{@link io.sermant.core.service.metric.entity.MetricCommonTagEnum}.
metric.common.tag.keys=agent,agent.app.name,agent.ip,scope
